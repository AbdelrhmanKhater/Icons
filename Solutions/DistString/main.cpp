#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <string.h>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <math.h>
#include<bits/stdc++.h>

using namespace std;


class DistanceBetweenStrings {
public:
    int letters[30];
    int letters1[30];

    int Greedy_Solve(string a, string b, string letterSet)
    {
        memset(letters, 0, sizeof letters);
        memset(letters1, 0, sizeof letters1);
        for (int i = 0; i < a.length(); i++)
        {
            if (a[i] >= 'a')
                letters[a[i] - 'a']++;
            else
                letters[a[i] - 'A']++;
        }
        for (int i = 0; i < b.length(); i++)
        {
            if (b[i] >= 'a')
                letters1[b[i] - 'a']++;
            else
                letters1[b[i] - 'A']++;
        }
        int ret = 0;
        int n1, n2, n3;
        for (int i = 0; i < letterSet.length(); i++)
        {
            n1 = letters[letterSet[i] - 'a'];
            n2 = letters1[letterSet[i] - 'a'];
            n3 = abs(n2 - n1);
            ret += ceil(pow(n3, 2.0));
        }
        return ret;
    }
	int getDistance(string a, string b, string letterSet) {
		return Greedy_Solve(a, b, letterSet);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, string p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	DistanceBetweenStrings *obj;
	int answer;
	obj = new DistanceBetweenStrings();
	clock_t startTime = clock();
	answer = obj->getDistance(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;
	string p2;
	int p3;

	{
	// ----- test 0 -----
	p0 = "topcoder";
	p1 = "contest";
	p2 = "tcp";
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "abcdef";
	p1 = "fedcba";
	p2 = "fed";
	p3 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "aaaaa";
	p1 = "bbbbb";
	p2 = "a";
	p3 = 25;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "aaAaB";
	p1 = "BbaAa";
	p2 = "ab";
	p3 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
	p1 = "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb";
	p2 = "ba";
	p3 = 5000;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = "ToPcOdEr";
	p1 = "tOpCoDeR";
	p2 = "wxyz";
	p3 = 0;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
